{"version":3,"sources":["hooks/useWindowSize.js","App.js","serviceWorker.js","index.js"],"names":["useWindowSize","getSize","width","window","innerWidth","height","innerHeight","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","App","size","app","useRef","scrollContainer","skewConfigs","ease","current","previous","rounded","requestAnimationFrame","skewScrolling","setBodyHeight","document","body","style","getBoundingClientRect","scrollY","Math","round","skew","transform","ref","className","src","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAwBeA,EAtBO,WACrB,IAAMC,EAAU,WACf,MAAO,CACNC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,cAJU,EAQSC,mBAASN,GARlB,mBAQpBO,EARoB,KAQRC,EARQ,KAmB3B,OATAC,qBAAU,WACT,IAAMC,EAAe,WACpBF,EAAcR,MAIf,OADAE,OAAOS,iBAAiB,SAAUD,GAC3B,kBAAMR,OAAOU,oBAAoB,SAAUF,MAChD,IAEIH,GC4EOM,MA5Ff,WAEC,IAAMC,EAAOf,IAEPgB,EAAMC,mBACNC,EAAkBD,mBAGlBE,EAAc,CACnBC,KAAM,KACNC,QAAS,EACTC,SAAU,EACVC,QAAS,GAIVb,qBAAU,WAETc,uBAAsB,WAErBC,SAGC,IAEHf,qBAAU,WACTgB,MACE,CAACX,EAAKV,SAET,IAAMqB,EAAgB,WACrBC,SAASC,KAAKC,MAAMxB,OAApB,UACCa,EAAgBG,QAAQS,wBAAwBzB,OADjD,OAKKoB,EAAgB,SAAhBA,IAELN,EAAYE,QAAUlB,OAAO4B,QAC7BZ,EAAYG,WACVH,EAAYE,QAAUF,EAAYG,UAAYH,EAAYC,KAC5DD,EAAYI,QAAUS,KAAKC,MAA6B,IAAvBd,EAAYG,UAAkB,IAK/D,IAGMY,EAAkB,MAHLf,EAAYE,QAAUF,EAAYI,SACnBR,EAAKb,OAKvCgB,EAAgBG,QAAQQ,MAAMM,UAA9B,0BAA6DhB,EAAYI,QAAzE,wBAAgGW,EAAhG,QAEAV,uBAAsB,kBAAMC,QAG7B,OACC,yBAAKW,IAAKpB,EAAKqB,UAAU,OACxB,yBAAKD,IAAKlB,EAAiBmB,UAAU,UACpC,oCACM,0BAAMA,UAAU,WAAhB,cAEN,yBAAKC,IAAI,uCAAuCC,IAAI,KACpD,oCACM,0BAAMF,UAAU,WAAhB,cAEN,yBAAKC,IAAI,uCAAuCC,IAAI,KACpD,oCACM,0BAAMF,UAAU,WAAhB,cAEN,yBAAKC,IAAI,uCAAuCC,IAAI,KACpD,oCACM,0BAAMF,UAAU,WAAhB,cAEN,yBAAKC,IAAI,uCAAuCC,IAAI,KACpD,oCACM,0BAAMF,UAAU,WAAhB,cAEN,yBAAKC,IAAI,uCAAuCC,IAAI,KACpD,oCACM,0BAAMF,UAAU,WAAhB,cAEN,yBAAKC,IAAI,uCAAuCC,IAAI,KACpD,oCACM,0BAAMF,UAAU,WAAhB,cAEN,yBAAKC,IAAI,uCAAuCC,IAAI,QC/EpCC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f3c782b0.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useWindowSize = () => {\r\n\tconst getSize = () => {\r\n\t\treturn {\r\n\t\t\twidth: window.innerWidth,\r\n\t\t\theight: window.innerHeight,\r\n\t\t};\r\n\t};\r\n\r\n\tconst [windowSize, setWindowSize] = useState(getSize);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleResize = () => {\r\n\t\t\tsetWindowSize(getSize());\r\n\t\t};\r\n\r\n\t\twindow.addEventListener('resize', handleResize);\r\n\t\treturn () => window.removeEventListener('resize', handleResize);\r\n\t}, []);\r\n\r\n\treturn windowSize;\r\n};\r\n\r\nexport default useWindowSize;\r\n","import React, { useRef, useEffect } from 'react';\nimport './App.scss';\n\nimport useWindowSize from './hooks/useWindowSize';\n\nfunction App() {\n\t// Hook\n\tconst size = useWindowSize();\n\t// REF\n\tconst app = useRef();\n\tconst scrollContainer = useRef();\n\n\t// Configs\n\tconst skewConfigs = {\n\t\tease: 0.125,\n\t\tcurrent: 0,\n\t\tprevious: 0,\n\t\trounded: 0,\n\t};\n\n\t// Run scrollrender once page is loaded.\n\tuseEffect(() => {\n\t\t// console.log(skewScrolling);\n\t\trequestAnimationFrame(() => {\n\t\t\t// console.log(skewScrolling);\n\t\t\tskewScrolling();\n\t\t});\n\t\t// skewScrolling();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsetBodyHeight();\n\t}, [size.height]);\n\n\tconst setBodyHeight = () => {\n\t\tdocument.body.style.height = `${\n\t\t\tscrollContainer.current.getBoundingClientRect().height\n\t\t}px`;\n\t};\n\n\tconst skewScrolling = () => {\n\t\t// console.log(window.screenY);\n\t\tskewConfigs.current = window.scrollY;\n\t\tskewConfigs.previous +=\n\t\t\t(skewConfigs.current - skewConfigs.previous) * skewConfigs.ease;\n\t\tskewConfigs.rounded = Math.round(skewConfigs.previous * 100) / 100;\n\n\t\t// console.log(skewConfigs);\n\n\t\t// variables\n\t\tconst difference = skewConfigs.current - skewConfigs.rounded;\n\t\tconst acceleration = difference / size.width;\n\t\tconst velocity = +acceleration;\n\t\tconst skew = velocity * 10; // 7.5\n\n\t\t//\n\t\tscrollContainer.current.style.transform = `translate3d(0, -${skewConfigs.rounded}px, 0) skewY(${skew}deg)`;\n\n\t\trequestAnimationFrame(() => skewScrolling());\n\t};\n\n\treturn (\n\t\t<div ref={app} className=\"App\">\n\t\t\t<div ref={scrollContainer} className=\"scroll\">\n\t\t\t\t<h2>\n\t\t\t\t\tSkew <span className=\"outline\">Scrolling</span>\n\t\t\t\t</h2>\n\t\t\t\t<img src=\"https://picsum.photos/id/237/600/400\" alt=\"\" />\n\t\t\t\t<h2>\n\t\t\t\t\tSkew <span className=\"outline\">Scrolling</span>\n\t\t\t\t</h2>\n\t\t\t\t<img src=\"https://picsum.photos/id/498/600/400\" alt=\"\" />\n\t\t\t\t<h2>\n\t\t\t\t\tSkew <span className=\"outline\">Scrolling</span>\n\t\t\t\t</h2>\n\t\t\t\t<img src=\"https://picsum.photos/id/184/600/400\" alt=\"\" />\n\t\t\t\t<h2>\n\t\t\t\t\tSkew <span className=\"outline\">Scrolling</span>\n\t\t\t\t</h2>\n\t\t\t\t<img src=\"https://picsum.photos/id/350/600/400\" alt=\"\" />\n\t\t\t\t<h2>\n\t\t\t\t\tSkew <span className=\"outline\">Scrolling</span>\n\t\t\t\t</h2>\n\t\t\t\t<img src=\"https://picsum.photos/id/290/600/400\" alt=\"\" />\n\t\t\t\t<h2>\n\t\t\t\t\tSkew <span className=\"outline\">Scrolling</span>\n\t\t\t\t</h2>\n\t\t\t\t<img src=\"https://picsum.photos/id/113/600/400\" alt=\"\" />\n\t\t\t\t<h2>\n\t\t\t\t\tSkew <span className=\"outline\">Scrolling</span>\n\t\t\t\t</h2>\n\t\t\t\t<img src=\"https://picsum.photos/id/110/600/400\" alt=\"\" />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}